-----------------------------------------------------------------------------
Informations generales :
-----------------------------------------------------------------------------

Groupe:
    - Vizzini Jeremy
    - Finiel Jeremie
    - Souchet Julie
    - Heckmann Victor


Configuration et execution :
    - source ~/.envarm/setenvarm.sh
    - ./configure
    - make 
    - ./simulator.sh -g -d
    - arm-eabi-gdb
    - file Examples/example1
    - target remote localhost:50000
    - load
    - stepi

Pour obtenir de l'aide il y a :
	- ./simulator.sh -h
    - ./arm_simulator -- help
	- ./arm_simulator --debug *.c

Bizzareries:
	- /home/f/fourneln/gnutools/arm/bin/arm-eabi-gdb

-----------------------------------------------------------------------------
Avancement du projet :
-----------------------------------------------------------------------------

Tâches :
    - gestion de la memoire         : implemente et teste
    - fetch d'une instruction       : implemente et teste
    - execution des instructions    : implemente et en cours de test
    - gestion des interruptions IRQ : implemente et pas teste
    - compte rendu final            : en cours
    
Gestion des differentes instructions :
|--------------|---------|------------|-------|------------------------------|
| Instructions |   Doc   | Implemente | Teste | Nom du test                  |
|--------------|---------|------------|-------|------------------------------|
|     B        |   160   |    oui     |-------|        exampleB_BL.s         |
|     BL       |   160   |    oui     |-------|        exampleB_BL.s         |
|--------------|---------|------------|-------|------------------------------|
|     TEQ      | 378+442 |    oui     |-------|   exampleTST_TEQ_CMP_CMN.s   |
|     CMP      | 178+442 |    oui     |-------|   exampleTST_TEQ_CMP_CMN.s   |
|     CMN      | 176+442 |    oui     |-------|   exampleTST_TEQ_CMP_CMN.s   |
|     ORR      | 234+442 |    oui     |-------|   example_operations_bin.s   |
|     MOV      | 218+442 |    oui     |-------|       exampleMOV_MVN.s       |
|     BIC      | 162+442 |    oui     |-------|   example_operations_bin.s   |
|     MVN      | 232+442 |    oui     |-------|       exampleMOV_MVN.s       |
|     AND      | 158+442 |    oui     |-------|   example_operations_bin.s   |
|     EOR      | 182+442 |    oui     |-------|   example_operations_bin.s   |
|     SUB      | 358+442 |    oui     |-------|     example_operations.s     |
|     RSB      | 265+442 |    oui     |-------|     example_operations.s     |
|     ADD      | 156+442 |    oui     |-------|     example_operations.s     |
|     ADC      | 154+442 |    oui     |-------|     example_operations.s     |
|     SBC      | 275+442 |    oui     |-------|     example_operations.s     |
|     RSC      | 265+442 |    oui     |-------|     example_operations.s     |
|     TST      | 380+442 |    oui     |-------|   exampleTST_TEQ_CMP_CMN.s   |
|--------------|---------|------------|-------|------------------------------|
|     LDR      | 193+458 |    oui     |-------|         exampleLDR.s         |
|     LDRB     | 196+458 |    oui     |-------|         exampleLDRB.s        |
|     LDRH     | 204+473 |    oui     |-------|         exampleLDRH.s        |
|     STR      | 343+458 |    oui     |-------|         exampleSTR.s         |
|     STRB     | 345+458 |    oui     |-------|         exampleSTRB.s        |
|     STRH     | 354+473 |    oui     |-------|         exampleSTRH.s        |
|     LDM(1)   | 186+481 |    oui     |-------|       exampleLDM_STM.s       |
|     STM(1)   | 339+481 |    oui     |-------|       exampleLDM_STM.s       |
|--------------|---------|------------|-------|------------------------------|
|     MRS      |   224   |    oui     |-------|         exampleMSR.s         |
|     MSR      |   226   |    oui     |-------|         exampleMSR.s         |
|--------------|---------|------------|-------|------------------------------|

Ajouter en plus:
|--------------|---------|------------|-------|------------------------------|
|     LDRSB    | 206+473 |    oui     |-------|------------------------------|
|     LDRSH    | 208+473 |    oui     |-------|------------------------------|
|--------------|---------|------------|-------|------------------------------|
|     LDRT     | 210+458 |    oui     |-------|------------------------------|
|     STRT     | 356+458 |    oui     |-------|------------------------------|
|     LDRBT    | 198+458 |    oui     |-------|------------------------------|
|     STRBT    | 347+458 |    oui     |-------|------------------------------|
|     LDRD     | 196+473 |    oui     |-------|------------------------------|
|     STRD     | 349+473 |    oui     |-------|------------------------------|
|--------------|---------|------------|-------|------------------------------|
|     MSR      |   226   |    oui     |-------|------------------------------|
|--------------|---------|------------|-------|------------------------------|


TODO:
	- load et store ne declenche pas d'exception
    

-----------------------------------------------------------------------------
Modification par fichiers :
-----------------------------------------------------------------------------

|---------------------|------------------------------------------------------|
| arm_core            | - ajout de fonctions pour l'acces et ecriture de NZCV|
|---------------------|------------------------------------------------------|
| arm_exception       | - a completer ...                                    |
|---------------------|------------------------------------------------------|
| memory              | - implementation des acces a la memoire              |
|---------------------|------------------------------------------------------|
| arm_instruction     | - ajout du fetch                                     |
|                     | - prise en compte des conditions                     |
|                     | - redirection des instructions dans les handlers     |
|---------------------|------------------------------------------------------|
| arm_data_processing | - a completer ...                                    |
|---------------------|------------------------------------------------------|
| arm_load_store      | - a completer ...                                    |
|---------------------|------------------------------------------------------|
| arm_branch_other    | - a completer ...                                    |
|---------------------|------------------------------------------------------|


Traitants des differentes classes d instructions (p110 figure A3-1)
|-----------------------------------------------|------|
| Traitants                                     | Code |
|-----------------------------------------------|------|
| arm_data_processing_shift                     | 000  |
| arm_data_processing_immediate                 | 001  |
| arm_load_store_immediate                      | 010  |
| arm_load_store                                | 011  |
| arm_load_store_multiple                       | 100  |
| arm_branch                                    | 101  |
| arm_coprocessor_load_store                    | 110  |
| arm_coprocessor_others_swi                    | 111  |
|-----------------------------------------------|------|

-----------------------------------------------------------------------------
Documentation :
-----------------------------------------------------------------------------

Schema d'une instruction vu au niveau de arm_instruction (p110 figure A3-1)
|-------------|----------|--------------------|
| 31 30 29 28 | 27 26 25 | 24 ############# 0 |
|-------------|----------|--------------------|
| cond field  | handler  | XXXXXXXXXXXXXXXXXX |
|-------------|----------|--------------------|

Les differentes valeurs du champ de condition (p112 figure A3-4)
|-----------------------------------|------|-----------|----------|
| Description                       | Code | Flags     | Mnemonic |
|-----------------------------------|------|-----------|----------|
| Equal                             | 0000 | Z=1       | EQ       |
| Not equal                         | 0001 | Z=0       | NE       |
| Carry set/unsigned higher or same | 0010 | C=1       | CS/HS    |
| Carry clear/unsigned lower        | 0011 | C=0       | CC/LO    |
| Minus/negative                    | 0100 | N=1       | MI       |
| Plus/positive or zero             | 0101 | N=0       | PL       |
| Overflow                          | 0110 | V=1       | VS       |
| No overflow                       | 0111 | V=0       | VC       |
| Unsigned higher                   | 1000 | C=1 Z=0   | HI       |
| Unsigned lower or same            | 1001 | C=0 Z=1   | LS       |
| Signed greater than or equal      | 1010 | N=V       | GE       |
| Signed less than                  | 1011 | N!=V      | LT       |
| Signed greater than               | 1100 | Z=0 N=V   | GT       |
| Signed less than or equal         | 1101 | Z=1 N!=V  | LE       |
| Always (unconditional)            | 1110 | Always    | AL       |
| 1111  (see page 110)              | 1111 | Undefined |          |
|-----------------------------------|------|-----------|----------|

Operation de Data processing (p115 table A3-2)
|--------|----------|------------------------------|-----------------------------------------------|
| Opcode | Mnemonic | Operation                    | Instructions action                           |
|--------|----------|------------------------------|-----------------------------------------------|
|  0000  |   AND    | Logical AND                  | Rd := Rn AND shifter_operand                  |
|  0001  |   EOR    | Logical Exclusive OR         | Rd := Rn EOR shifter_operand                  |
|  0010  |   SUB    | Subtract                     | Rd := Rn - shifter_operand                    |
|  0011  |   RSB    | Reverse                      | Rd := shifter_operand - Rn                    |
|  0100  |   ADD    | Add                          | Rd := Rn + shifter_operand                    |
|  0101  |   ADC    | Add with Carry               | Rd := Rn + shifter_operand + Carry Flag       |
|  0110  |   SBC    | Subtract with Carry          | Rd := Rn - shifter_operand - NOT(Carry Flag)  |
|  0111  |   RSC    | Reverse Subtract with Carry  | Rd := shifter_operand - Rn - NOT(Carry Flag)  |
|  1000  |   TST    | Test                         | Update flags after Rn AND shifter_operand     |
|  1001  |   TEQ    | Test Equivalence             | Update flags after Rn EOR shifter_operand     |
|  1010  |   CMP    | Compare                      | Update flags after Rn - shifter_operand       |
|  1011  |   CMN    | Compare Negated              | Update flags after Rn + shifter_operand       |
|  1100  |   ORR    | Logical (inclusive) OR       | Rd := Rn OR shifter_operand                   |
|  1101  |   MOV    | Move                         | Rd := shifter_operand (no first operand)      |
|  1110  |   BIC    | Bit Clear                    | Rd := Rn AND NOT(shifter_operand)             |
|  1111  |   MVN    | Move Not                     | Rd := NOT shifter_operand (no first operand)  |
|--------|----------|------------------------------|-----------------------------------------------|


Les différents Shifts (p.449-457)
|------|----------|---------------------------------------------------|
| Code | Mnemonic | Effet                                             |
|------|----------|---------------------------------------------------|
|  00  |   LSL    | Decale d'un certain nombre de bits vers la gauche |
|      |          | en ajoutant des 0 à droite                        |
|------|----------|---------------------------------------------------|
|  01  |   LSR    | Decale d'un certain nombre de bits vers la droite |
|      |          | en ajoutant des 0 à gauche                        |
|------|----------|---------------------------------------------------|
|  10  |   ASR    | Identique à LSR, sauf que les bits ajoutés à      |
|      |          | gauche sont les mêmes que le bit de poids fort    |
|------|----------|---------------------------------------------------|
|  11  |   ROR    | Decale d'un certain nombre de bits vers la droite,|
|      |          | les bits dépassant à droite sont ajoutés à gauche |
|------|----------|---------------------------------------------------|
|  11  |   RRX    | Decale de 1 vers la droite, ajoute C à gauche     |
|      |          | (RRX <=> ROR #0)                                  |
|------|----------|---------------------------------------------------|
 
 
Load and store offset :
|--------------------------------------------|---|
| Types of offset                            | I |
|--------------------------------------------|---|
| Immediate offset on page A5-20.            | 0 |    
| Register offset on page A5-21.             | 1 | 
| Scaled register offset on page A5-22.      | 1 | 
| Immediate pre-indexed on page A5-24.       | 0 | 
| Register pre-indexed on page A5-25.        | 1 | 
| Scaled register pre-indexed on page A5-26  | 1 |
| Immediate post-indexed on page A5-28       | 0 | 
| Register post-indexed on page A5-30        | 1 | 
| Scaled register post-indexed on page A5-31 | 1 | 
|--------------------------------------------|---|

TODO :
	- rendre les debug plus lisibles (écriture hexa => texte)
	- progresssion des tests : https://docs.google.com/spreadsheets/d/1uVqLLIrAIYpqXpx9BKyF-LIT051zsBn1Ceasu3MpmaA/edit#gid=0
